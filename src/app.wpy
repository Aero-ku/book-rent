<style lang="less">
@import 'weui.wxss';
.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'

export default class app extends wepy.app {
  config = {
    pages: [
      'pages/index', // 首页
      'pages/card', // 购卡
      'pages/borrow', // 借书架
      'pages/user', // 个人中心
      'pages/login/index',
      'pages/main/detail', // 图书详情
      'pages/main/myOrder', // 我的订单
      'pages/main/bookClassify', // 图书分类
      'pages/main/sortPage', // 分类结果页
      'pages/main/myStore' // 我的收藏页
    ],
    window: {
      navigationBarTitleText: '满熊阅读',
      navigationBarTextStyle: 'black',
      navigationBarBackgroundColor: '#fff',
      backgroundColor: '#eaeaea',
      backgroundTextStyle: 'light',
      enablePullDownRefresh: true
    },
    tabBar: {
      color: '#AEADAD',
      selectedColor: '#79C9BA',
      backgroundColor: '#fff',
      borderStyle: 'black',
      list: [
        {
          pagePath: 'pages/index',
          selectedIconPath: './images/new/icon_1@2x.png',
          iconPath: './images/new/icon_1u@2x.png',
          text: '首页'
        },
        {
          pagePath: 'pages/card',
          selectedIconPath: './images/new/icon_2@2x.png',
          iconPath: './images/new/icon_2u@2x.png',
          text: '购卡'
        },
        {
          pagePath: 'pages/borrow',
          selectedIconPath: './images/new/icon_3@2x.png',
          iconPath: './images/new/icon_3u@2x.png',
          text: '借书架'
        },
        {
          pagePath: 'pages/user',
          selectedIconPath: './images/new/icon_4@2x.png',
          iconPath: './images/new/icon_4u@2x.png',
          text: '我的'
        }
      ]
    }
  }

  globalData = {
    userInfo: {
      nickName: '未登录',
      avatarUrl: 'http://mxhb.sztd123.com/images/user/avatar_default.png',
      msg: '点击登录'
    },
    authorize: false,
    open_id: '',
    // 借书架书本数量
    bookShelfTotal: [],
    // 会员卡信息
    cardInfo: {}
  }

  constructor () {
    super()
    this.use('requestfix')
  }

  onLaunch() {
    console.log('onLaunch监听小程序初始化')
  }

  onShow() {
    console.log('onShow监听小程序显示')
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }
  updateShelfInfo() {
    const self = this
    const { nickName } = this.globalData.userInfo
    wx.request({
      url: 'http://localhost:12306/shelfInfo',
      data: {
        user_name: nickName
      },
      method: 'get',
      success(res) {
        if (res.statusCode === 200) {
          self.globalData.bookShelfTotal = res.data[0].user_borrow
          console.log('bookShelfTotal', self.globalData.bookShelfTotal)
          const len = res.data[0].user_borrow.length
          if (len >= 1) {
            wx.setTabBarBadge({
              index: 2,
              text: `${len}`
            })
          }
        }
      }
    })
  }
  updateCardInfo() {
    const self = this
    const { nickName } = self.globalData.userInfo
    wx.request({
      url: 'http://localhost:12306/getCardInfo',
      method: 'get',
      data: {
        userName: nickName
      },
      success(res) {
        if (res.statusCode === 200) {
          const endStamp = res.data.end_effect
          const endTime = self.parseTime(endStamp)
          const currentStamp = +new Date()
          const cardStatus = endStamp >= currentStamp ? true : false
          self.globalData.cardInfo = Object.assign({}, {endTime: endTime, cardStatus: cardStatus})
          console.log('self.cardInfo', self.cardInfo)
        }
      }
    })
  }
  parseTime(time) {
    var date = new Date(time + 8 * 3600 * 1000) // 增加8小时
    return date.toJSON().substr(0, 19).replace('T', ' ') // "2019-05-26 20:21:58"
  }
}
</script>
